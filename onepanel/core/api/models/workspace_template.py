# coding: utf-8

"""
    Onepanel

    Onepanel API  # noqa: E501

    The version of the OpenAPI document: 0.14.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onepanel.core.api.configuration import Configuration


class WorkspaceTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'name': 'str',
        'version': 'str',
        'manifest': 'str',
        'is_latest': 'bool',
        'created_at': 'str',
        'workflow_template': 'WorkflowTemplate',
        'labels': 'list[KeyValue]',
        'is_archived': 'bool',
        'description': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'name': 'name',
        'version': 'version',
        'manifest': 'manifest',
        'is_latest': 'isLatest',
        'created_at': 'createdAt',
        'workflow_template': 'workflowTemplate',
        'labels': 'labels',
        'is_archived': 'isArchived',
        'description': 'description'
    }

    def __init__(self, uid=None, name=None, version=None, manifest=None, is_latest=None, created_at=None, workflow_template=None, labels=None, is_archived=None, description=None, local_vars_configuration=None):  # noqa: E501
        """WorkspaceTemplate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._name = None
        self._version = None
        self._manifest = None
        self._is_latest = None
        self._created_at = None
        self._workflow_template = None
        self._labels = None
        self._is_archived = None
        self._description = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if manifest is not None:
            self.manifest = manifest
        if is_latest is not None:
            self.is_latest = is_latest
        if created_at is not None:
            self.created_at = created_at
        if workflow_template is not None:
            self.workflow_template = workflow_template
        if labels is not None:
            self.labels = labels
        if is_archived is not None:
            self.is_archived = is_archived
        if description is not None:
            self.description = description

    @property
    def uid(self):
        """Gets the uid of this WorkspaceTemplate.  # noqa: E501


        :return: The uid of this WorkspaceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this WorkspaceTemplate.


        :param uid: The uid of this WorkspaceTemplate.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this WorkspaceTemplate.  # noqa: E501


        :return: The name of this WorkspaceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkspaceTemplate.


        :param name: The name of this WorkspaceTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this WorkspaceTemplate.  # noqa: E501


        :return: The version of this WorkspaceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkspaceTemplate.


        :param version: The version of this WorkspaceTemplate.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def manifest(self):
        """Gets the manifest of this WorkspaceTemplate.  # noqa: E501


        :return: The manifest of this WorkspaceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this WorkspaceTemplate.


        :param manifest: The manifest of this WorkspaceTemplate.  # noqa: E501
        :type: str
        """

        self._manifest = manifest

    @property
    def is_latest(self):
        """Gets the is_latest of this WorkspaceTemplate.  # noqa: E501


        :return: The is_latest of this WorkspaceTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this WorkspaceTemplate.


        :param is_latest: The is_latest of this WorkspaceTemplate.  # noqa: E501
        :type: bool
        """

        self._is_latest = is_latest

    @property
    def created_at(self):
        """Gets the created_at of this WorkspaceTemplate.  # noqa: E501


        :return: The created_at of this WorkspaceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WorkspaceTemplate.


        :param created_at: The created_at of this WorkspaceTemplate.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def workflow_template(self):
        """Gets the workflow_template of this WorkspaceTemplate.  # noqa: E501


        :return: The workflow_template of this WorkspaceTemplate.  # noqa: E501
        :rtype: WorkflowTemplate
        """
        return self._workflow_template

    @workflow_template.setter
    def workflow_template(self, workflow_template):
        """Sets the workflow_template of this WorkspaceTemplate.


        :param workflow_template: The workflow_template of this WorkspaceTemplate.  # noqa: E501
        :type: WorkflowTemplate
        """

        self._workflow_template = workflow_template

    @property
    def labels(self):
        """Gets the labels of this WorkspaceTemplate.  # noqa: E501


        :return: The labels of this WorkspaceTemplate.  # noqa: E501
        :rtype: list[KeyValue]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WorkspaceTemplate.


        :param labels: The labels of this WorkspaceTemplate.  # noqa: E501
        :type: list[KeyValue]
        """

        self._labels = labels

    @property
    def is_archived(self):
        """Gets the is_archived of this WorkspaceTemplate.  # noqa: E501


        :return: The is_archived of this WorkspaceTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this WorkspaceTemplate.


        :param is_archived: The is_archived of this WorkspaceTemplate.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def description(self):
        """Gets the description of this WorkspaceTemplate.  # noqa: E501


        :return: The description of this WorkspaceTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkspaceTemplate.


        :param description: The description of this WorkspaceTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceTemplate):
            return True

        return self.to_dict() != other.to_dict()
