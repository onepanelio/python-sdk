# coding: utf-8

"""
    Onepanel

    Onepanel API  # noqa: E501

    The version of the OpenAPI document: 0.14.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from onepanel.core.api.configuration import Configuration


class GetConfigResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_url': 'str',
        'domain': 'str',
        'fqdn': 'str',
        'node_pool': 'NodePool'
    }

    attribute_map = {
        'api_url': 'apiUrl',
        'domain': 'domain',
        'fqdn': 'fqdn',
        'node_pool': 'nodePool'
    }

    def __init__(self, api_url=None, domain=None, fqdn=None, node_pool=None, local_vars_configuration=None):  # noqa: E501
        """GetConfigResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_url = None
        self._domain = None
        self._fqdn = None
        self._node_pool = None
        self.discriminator = None

        if api_url is not None:
            self.api_url = api_url
        if domain is not None:
            self.domain = domain
        if fqdn is not None:
            self.fqdn = fqdn
        if node_pool is not None:
            self.node_pool = node_pool

    @property
    def api_url(self):
        """Gets the api_url of this GetConfigResponse.  # noqa: E501


        :return: The api_url of this GetConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this GetConfigResponse.


        :param api_url: The api_url of this GetConfigResponse.  # noqa: E501
        :type: str
        """

        self._api_url = api_url

    @property
    def domain(self):
        """Gets the domain of this GetConfigResponse.  # noqa: E501


        :return: The domain of this GetConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this GetConfigResponse.


        :param domain: The domain of this GetConfigResponse.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def fqdn(self):
        """Gets the fqdn of this GetConfigResponse.  # noqa: E501


        :return: The fqdn of this GetConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this GetConfigResponse.


        :param fqdn: The fqdn of this GetConfigResponse.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def node_pool(self):
        """Gets the node_pool of this GetConfigResponse.  # noqa: E501


        :return: The node_pool of this GetConfigResponse.  # noqa: E501
        :rtype: NodePool
        """
        return self._node_pool

    @node_pool.setter
    def node_pool(self, node_pool):
        """Sets the node_pool of this GetConfigResponse.


        :param node_pool: The node_pool of this GetConfigResponse.  # noqa: E501
        :type: NodePool
        """

        self._node_pool = node_pool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetConfigResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetConfigResponse):
            return True

        return self.to_dict() != other.to_dict()
